import java.io.*;import java.lang.*;/** * This class creates a board, makes all the moves and controls the game *  * @author Peter Sallai   * @version 1.2 */public class GameBoard {    static String board[][] = new String [10][10];    boolean valid[][] = new boolean[10][10];    boolean acceptedMove;    static boolean save = false;    static boolean play;           /**     * Constructor - initialises the starting board     *     */    public GameBoard()    {        for (int i = 1; i < 9; i++)        {            for (int j = 1; j < 9; j++)            {                board[i][j] = " ";            }            board[7][1] = "o";            board[5][1] = "x";            board[5][2] = "x";            board[5][3] = "x";            board[6][3] = "x";            board[5][5] = "x";            board[5][6] = "x";            board[5][8] = "x";            board[6][8] = "x";            board[7][8] = "x";            board[3][3] = "•";            board[3][6] = "•";            board[2][3] = "x";            board[2][5] = "x";            board[2][6] = "x";            board[1][2] = "e";        }                        for (int j = 0; j < 10; j++)        {            board[0][j] = " # ";        }                for (int j = 0; j < 10; j++)        {            board[9][j] = " # ";        }                for (int i = 0; i < 10; i++)        {            board[i][0] = " # ";        }                 for (int i = 0; i < 10; i++)        {            board[i][9] = " # ";        }       }        /**     * Method - displays the updated board after each move     *     */    public void displayBoard()    {        System.out.print("                      ");                for(int j = 0; j < 10; j++)        {            System.out.print(j + "  ");        }                System.out.print("\n                   0 ");                for(int j = 0; j < 10; j++)        {            System.out.print(board[0][j]);        }                System.out.print("\n");                        for (int i = 1; i < 9; i++)        {            System.out.print("                   " + i + " " + board[i][0]);                        for (int j = 1; j < 9; j++)            {                   System.out.print("[" + board[i][j] + "]");            }                        System.out.print(board[i][9]);                        System.out.print("\n");                    }                System.out.print("                   9 ");                for(int j = 0; j < 10; j++)        {            System.out.print(board[9][j]);        }                System.out.print("\n");                //currentScore();    }        /**     * Method - displays the current score of the game     *     */    /*private void currentScore()    {                int black_pieces = 0;        int white_pieces = 0;                for (int i = 1; i < 9; i++)        {            for (int j = 1; j < 9; j++)            {                if (board[i][j].equals("•"))                {                    black_pieces++;                }            }        }                for (int i = 1; i < 9; i++)        {            for (int j = 1; j < 9; j++)            {                if (board[i][j].equals("o"))                {                    white_pieces++;                }            }        }                System.out.print("                         Score: ");        System.out.println("black --> " + black_pieces);        System.out.println("                                white --> " + white_pieces);    }*/        /**     * Method - checks the amount of playable squares, if no move can be made, passes the turn to the next player     *     * @return: boolean play     */    /*private boolean moveAvailability()    {        int validity = 0; //checks the amount of playable squares        int help = 0; //if there are no playable squares                play = true;                do        {            if (whitePlayer == false)            {                 checkMoveValidity_blackTurn();                                for (int row = 1; row < 9; row++)                {                                for (int column = 1; column < 9; column++)                    {                        if (valid[row][column] == true)                        {                            validity += 1;                        }                    }                }                           if (validity == 0)                {                    help += 1;                    switchPlayer();                                        if (help == 1)                    {                        if (whitePlayer == true)                        {                            System.out.print("Black ");                        }                        else                        {                            System.out.print("White ");                        }                                                System.out.print("player cannot make a move.\n   ");                    }                }            }                        if (whitePlayer == true)            {                 checkMoveValidity_whiteTurn();                                for (int row = 1; row < 9; row++)                {                                for (int column = 1; column < 9; column++)                    {                        if (valid[row][column] == true)                        {                            validity += 1;                        }                    }                }                           if (validity == 0)                {                    help += 1;                    switchPlayer();                                        if (help == 1)                    {                        if (whitePlayer == true)                        {                            System.out.print("Black ");                        }                        else                        {                            System.out.print("White ");                        }                                                System.out.print("player cannot make a move.\n   ");                    }                }            }                        if (help == 2) //if there is no valid move for both players, jump out of the loop            {                play = false;                break;            }        }         while (validity == 0);                if (validity > 0)        {            System.out.println("Make a move by entering row and column number separated by "," (Enter 0 to save game and return to menu.)");        }                return play;    }*/    /**     * Method - enables user to make a move, checks if the move is valid     *     * @return: boolean play     */    public boolean gameMove()     {        acceptedMove = false;        System.out.print("   ");        String [] splitMove = new String [2];        int row, column;                //moveAvailability();                if (play == true)        {            save = false;                    String move = Director.getString();                        if ((move.equals("1") || (move.equals("2") || (move.equals("3") || (move.equals("4") || (move.equals("5") || (move.equals("6") || (move.equals("7") || (move.equals("8"))))))))))            {                System.out.print("   You have to enter row and column number separated by a comma “,“\n     ");                move = Director.getString();            }                    if (move.equals("0"))            {                play = false;                save = true;                saveGame();                System.out.print("     Game saved.\n\n");                return play;            }            else            {                splitMove = move.split(",");                column = Integer.parseInt(splitMove[1]);                row = Integer.parseInt(splitMove[0]);                            updateBoard(row, column);                System.out.print("\n");            }                        //switchPlayer();               }        else        {            play = false;        }                return play;    }        /**     * Method - saves the game at its current state to the savedgame.txt document     *     */    public void saveGame()    {        int i, j;                FileOutputStream outputStream;        PrintWriter printWriter;                try        {             outputStream = new FileOutputStream("savedgame.txt");            printWriter = new PrintWriter(outputStream);                        for (i = 1; i < 9; i++)            {                for (j = 1; j < 9; j++)                {                    printWriter.println(board[i][j]);                }            }                        printWriter.flush();            printWriter.close();        }        catch(Exception e)        {            System.out.println("File cannot be written to");        }    }        /**     * Method - loads the most recent saved game from savedgame.txt document     *     */    public void loadGame()    {        int i, j;                try        {            FileReader fileReader;            BufferedReader reader;            fileReader = new FileReader("savedgame.txt");            reader = new BufferedReader(fileReader);                    String line = reader.readLine();                    do            {                for (i = 1; i < 9; i++)                {                    for (j = 1; j < 9; j++)                    {                        board[i][j] = line;                        line = reader.readLine();                    }                }            }            while(line != null);        }        catch(Exception e)        {            System.out.println("Cannot read from file");        }    }        /**     * Method - if a player cannot make a move, enables the system to pass the turn to the next player.      *     */    /*private void turn()    {        boolean turn;                turn = whitePlayer;                if (turn == true)        {            System.out.println("White player's turn. (Enter 0 to save game and return to menu.)");        }        else        {            System.out.println("Black player's turn. (Enter 0 to save game and return to menu.)");        }    }*/        /**     * Method - checks if the move is valid for the white player     *     */    /*private void checkMoveValidity_whiteTurn()    {        resetBoardValidity();                for (int row = 1; row < 9; row++)        {                        for (int column = 1; column < 9; column++)            {                if (board[row][column].equals("•"))                {                    if (board[row][column+1].equals(" ") && board[row][column-1].equals("o"))                    {                        valid[row][column+1] = true;                    }                                        if (board[row][column-1].equals(" ") && board[row][column+1].equals("o"))                    {                        valid[row][column-1] = true;                    }                                        if (board[row-1][column].equals(" ") && board[row+1][column].equals("o"))                    {                        valid[row-1][column] = true;                    }                                        if (board[row+1][column].equals(" ") && board[row-1][column].equals("o"))                    {                        valid[row+1][column] = true;                    }                                        if (board[row+1][column+1].equals(" ") && board[row-1][column-1].equals("o"))                    {                        valid[row+1][column+1] = true;                    }                                        if (board[row-1][column-1].equals(" ") && board[row+1][column+1].equals("o"))                    {                        valid[row-1][column-1] = true;                    }                                        if (board[row-1][column+1].equals(" ") && board[row+1][column-1].equals("o"))                    {                        valid[row-1][column+1] = true;                    }                                        if (board[row+1][column-1].equals(" ") && board[row-1][column+1].equals("o"))                    {                        valid[row+1][column-1] = true;                    }                                        if (board[row][column+1].equals(" ") && board[row][column-1].equals("•"))                    {                        int temp_column = column;                                                while (board[row][temp_column].equals("•"))                        {                            temp_column -= 1;                                                        if (board[row][temp_column].equals("o"))                            {                                valid[row][column+1] = true;                                break;                            }                        }                    }                                        if (board[row][column-1].equals(" ") && board[row][column+1].equals("•"))                    {                        int temp_column = column;                                                while (board[row][temp_column].equals("•"))                        {                            temp_column += 1;                                                        if (board[row][temp_column].equals("o"))                            {                                valid[row][column-1] = true;                                break;                            }                        }                    }                                        if (board[row-1][column].equals(" ") && board[row+1][column].equals("•"))                    {                        int temp_row = row;                                                while (board[temp_row][column].equals("•"))                        {                            temp_row += 1;                                                        if (board[temp_row][column].equals("o"))                            {                                valid[row-1][column] = true;                                break;                            }                        }                    }                                        if (board[row+1][column].equals(" ") && board[row-1][column].equals("•"))                    {                        int temp_row = row;                                                while (board[temp_row][column].equals("•"))                        {                            temp_row -= 1;                                                        if (board[temp_row][column].equals("o"))                            {                                valid[row+1][column] = true;                                break;                            }                        }                    }                                        if (board[row+1][column+1].equals(" ") && board[row-1][column-1].equals("•"))                    {                        int temp_row = row;                        int temp_column = column;                                                while (board[temp_row][temp_column].equals("•"))                        {                            temp_row -= 1;                            temp_column -= 1;                                                        if (board[temp_row][temp_column].equals("o"))                            {                                valid[row+1][column+1] = true;                                break;                            }                        }                    }                                        if (board[row-1][column-1].equals(" ") && board[row+1][column+1].equals("•"))                    {                        int temp_row = row;                        int temp_column = column;                                                while (board[temp_row][temp_column].equals("•"))                        {                            temp_row += 1;                            temp_column += 1;                                                        if (board[temp_row][temp_column].equals("o"))                            {                                valid[row-1][column-1] = true;                                break;                            }                        }                    }                                        if (board[row+1][column-1].equals(" ") && board[row-1][column+1].equals("•"))                    {                        int temp_row = row;                        int temp_column = column;                                                while (board[temp_row][temp_column].equals("•"))                        {                            temp_row -= 1;                            temp_column += 1;                                                        if (board[temp_row][temp_column].equals("o"))                            {                                valid[row+1][column-1] = true;                                break;                            }                        }                    }                                        if (board[row-1][column+1].equals(" ") && board[row+1][column-1].equals("•"))                    {                        int temp_row = row;                        int temp_column = column;                                                while (board[temp_row][temp_column].equals("•"))                        {                            temp_row += 1;                            temp_column -= 1;                                                        if (board[temp_row][temp_column].equals("o"))                            {                                valid[row-1][column+1] = true;                                break;                            }                        }                    }                }            }        }    }*/        /**     * Method - checks if the move is valid for the black player     *     */    /*private void checkMoveValidity_blackTurn()    {        resetBoardValidity();                for (int row = 1; row < 9; row++)        {            for (int column = 1; column < 9; column++)            {                if (board[row][column].equals("o"))                {                    if (board[row][column+1].equals(" ") && board[row][column-1].equals("•"))                    {                        valid[row][column+1] = true;                    }                                        if (board[row][column-1].equals(" ") && board[row][column+1].equals("•"))                    {                        valid[row][column-1] = true;                    }                                        if (board[row-1][column].equals(" ") && board[row+1][column].equals("•"))                    {                        valid[row-1][column] = true;                    }                                        if (board[row+1][column].equals(" ") && board[row-1][column].equals("•"))                    {                        valid[row+1][column] = true;                    }                                        if (board[row+1][column+1].equals(" ") && board[row-1][column-1].equals("•"))                    {                        valid[row+1][column+1] = true;                    }                                        if (board[row-1][column-1].equals(" ") && board[row+1][column+1].equals("•"))                    {                        valid[row-1][column-1] = true;                    }                                        if (board[row-1][column+1].equals(" ") && board[row+1][column-1].equals("•"))                    {                        valid[row-1][column+1] = true;                    }                                        if (board[row+1][column-1].equals(" ") && board[row-1][column+1].equals("•"))                    {                        valid[row+1][column-1] = true;                    }                                                        if (board[row][column+1].equals(" ") && board[row][column-1].equals("o"))                    {                        int temp_column = column;                                            while (board[row][temp_column].equals("o"))                        {                            temp_column -= 1;                                                    if (board[row][temp_column].equals("•"))                            {                                valid[row][column+1] = true;                                break;                            }                        }                    }                                    if (board[row][column-1].equals(" ") && board[row][column+1].equals("o"))                    {                        int temp_column = column;                                            while (board[row][temp_column].equals("o"))                        {                            temp_column += 1;                                                    if (board[row][temp_column].equals("•"))                            {                                valid[row][column-1] = true;                                break;                            }                        }                    }                                    if (board[row-1][column].equals(" ") && board[row+1][column].equals("o"))                    {                        int temp_row = row;                                            while (board[temp_row][column].equals("o"))                        {                            temp_row += 1;                                                    if (board[temp_row][column].equals("•"))                            {                                valid[row-1][column] = true;                                break;                            }                        }                    }                                    if (board[row+1][column].equals(" ") && board[row-1][column].equals("o"))                    {                        int temp_row = row;                                            while (board[temp_row][column].equals("o"))                        {                            temp_row -= 1;                                                    if (board[temp_row][column].equals("•"))                            {                                valid[row+1][column] = true;                                break;                            }                        }                    }                                    if (board[row+1][column+1].equals(" ") && board[row-1][column-1].equals("o"))                    {                        int temp_row = row;                        int temp_column = column;                                            while (board[temp_row][temp_column].equals("o"))                        {                            temp_row -= 1;                            temp_column -= 1;                                                    if (board[temp_row][temp_column].equals("•"))                            {                                valid[row+1][column+1] = true;                                break;                            }                        }                    }                                    if (board[row-1][column-1].equals(" ") && board[row+1][column+1].equals("o"))                    {                        int temp_row = row;                        int temp_column = column;                                            while (board[temp_row][temp_column].equals("o"))                        {                            temp_row += 1;                            temp_column += 1;                                                    if (board[temp_row][temp_column].equals("•"))                            {                                valid[row-1][column-1] = true;                                break;                            }                        }                    }                                    if (board[row+1][column-1].equals(" ") && board[row-1][column+1].equals("o"))                    {                        int temp_row = row;                        int temp_column = column;                                            while (board[temp_row][temp_column].equals("o"))                        {                            temp_row -= 1;                            temp_column += 1;                                                    if (board[temp_row][temp_column].equals("•"))                            {                                valid[row+1][column-1] = true;                                break;                            }                        }                    }                                    if (board[row-1][column+1].equals(" ") && board[row+1][column-1].equals("o"))                    {                        int temp_row = row;                        int temp_column = column;                                            while (board[temp_row][temp_column].equals("o"))                        {                            temp_row += 1;                            temp_column -= 1;                                                    if (board[temp_row][temp_column].equals("•"))                            {                                valid[row-1][column+1] = true;                                break;                            }                        }                    }                }            }        }    }*/        /**     * Method - updates the board     *     * @param: int row, column     */    /*private void updateBoard(int row, int column)    {        int temp_column, counter, temp_row;                if (whitePlayer == true)        {            if (board[row][column+1].equals("•"))            {                temp_column = column + 1;                counter = 2;                                while (board[row][temp_column].equals("•"))                {                    temp_column++;                    counter++;                }                                if (!board[row][temp_column].equals("o"))                {                    counter = 0;                }                while (counter > 0)                {                    counter--;                    board[row][temp_column] = "o";                    temp_column--;                }            }                        if (board[row][column-1].equals("•"))            {                temp_column = column - 1;                counter = 2;                                while (board[row][temp_column].equals("•"))                {                    temp_column--;                    counter++;                }                                if (!board[row][temp_column].equals("o"))                {                    counter = 0;                }                while (counter > 0)                {                    counter--;                    board[row][temp_column] = "o";                    temp_column++;                }            }                        if (board[row-1][column].equals("•"))            {                temp_row = row - 1;                counter = 2;                                while (board[temp_row][column].equals("•"))                {                    temp_row--;                    counter++;                }                                if (!board[temp_row][column].equals("o"))                {                    counter = 0;                }                while (counter > 0)                {                    counter--;                    board[temp_row][column] = "o";                    temp_row++;                }            }                        if (board[row+1][column].equals("•"))            {                temp_row = row + 1;                counter = 2;                                while (board[temp_row][column].equals("•"))                {                    temp_row++;                    counter++;                }                                if (!board[temp_row][column].equals("o"))                {                    counter = 0;                }                while (counter > 0)                {                    counter--;                    board[temp_row][column] = "o";                    temp_row--;                }            }                        if (board[row+1][column+1].equals("•"))            {                temp_row = row + 1;                temp_column = column + 1;                counter = 2;                                while (board[temp_row][temp_column].equals("•"))                {                    temp_row++;                    temp_column++;                    counter++;                }                                if (!board[temp_row][temp_column].equals("o"))                {                    counter = 0;                }                while (counter > 0)                {                    counter--;                    board[temp_row][temp_column] = "o";                    temp_row--;                    temp_column--;                }            }                        if (board[row-1][column-1].equals("•"))            {                temp_row = row - 1;                temp_column = column - 1;                counter = 2;                                while (board[temp_row][temp_column].equals("•"))                {                    temp_row--;                    temp_column--;                    counter++;                }                                if (!board[temp_row][temp_column].equals("o"))                {                    counter = 0;                }                while (counter > 0)                {                    counter--;                    board[temp_row][temp_column] = "o";                    temp_row++;                    temp_column++;                }            }                        if (board[row+1][column-1].equals("•"))            {                temp_row = row + 1;                temp_column = column - 1;                counter = 2;                                while (board[temp_row][temp_column].equals("•"))                {                    temp_row++;                    temp_column--;                    counter++;                }                                if (!board[temp_row][temp_column].equals("o"))                {                    counter = 0;                }                while (counter > 0)                {                    counter--;                    board[temp_row][temp_column] = "o";                    temp_row--;                    temp_column++;                }            }                        if (board[row-1][column+1].equals("•"))            {                temp_row = row - 1;                temp_column = column + 1;                counter = 2;                                while (board[temp_row][temp_column].equals("•"))                {                    temp_row--;                    temp_column++;                    counter++;                }                                if (!board[temp_row][temp_column].equals("o"))                {                    counter = 0;                }                while (counter > 0)                {                    counter--;                    board[temp_row][temp_column] = "o";                    temp_row++;                    temp_column--;                }            }        }        else        {            if (board[row][column+1].equals("o"))            {                temp_column = column + 1;                counter = 2;                                while (board[row][temp_column].equals("o"))                {                    temp_column++;                    counter++;                }                                if (!board[row][temp_column].equals("•"))                {                    counter = 0;                }                while (counter > 0)                {                    counter--;                    board[row][temp_column] = "•";                    temp_column--;                }            }                        if (board[row][column-1].equals("o"))            {                temp_column = column - 1;                counter = 2;                                while (board[row][temp_column].equals("o"))                {                    temp_column--;                    counter++;                }                                if (!board[row][temp_column].equals("•"))                {                    counter = 0;                }                while (counter > 0)                {                    counter--;                    board[row][temp_column] = "•";                    temp_column++;                }            }                        if (board[row-1][column].equals("o"))            {                temp_row = row - 1;                counter = 2;                                while (board[temp_row][column].equals("o"))                {                    temp_row--;                    counter++;                }                                if (!board[temp_row][column].equals("•"))                {                    counter = 0;                }                while (counter > 0)                {                    counter--;                    board[temp_row][column] = "•";                    temp_row++;                }            }                        if (board[row+1][column].equals("o"))            {                temp_row = row + 1;                counter = 2;                                while (board[temp_row][column].equals("o"))                {                    temp_row++;                    counter++;                }                                if (!board[temp_row][column].equals("•"))                {                    counter = 0;                }                while (counter > 0)                {                    counter--;                    board[temp_row][column] = "•";                    temp_row--;                }            }                        if (board[row+1][column+1].equals("o"))            {                temp_row = row + 1;                temp_column = column + 1;                counter = 2;                                while (board[temp_row][temp_column].equals("o"))                {                    temp_row++;                    temp_column++;                    counter++;                }                                if (!board[temp_row][temp_column].equals("•"))                {                    counter = 0;                }                while (counter > 0)                {                    counter--;                    board[temp_row][temp_column] = "•";                    temp_row--;                    temp_column--;                }            }                        if (board[row-1][column-1].equals("o"))            {                temp_row = row - 1;                temp_column = column - 1;                counter = 2;                                while (board[temp_row][temp_column].equals("o"))                {                    temp_row--;                    temp_column--;                    counter++;                }                                if (!board[temp_row][temp_column].equals("•"))                {                    counter = 0;                }                while (counter > 0)                {                    counter--;                    board[temp_row][temp_column] = "•";                    temp_row++;                    temp_column++;                }            }                        if (board[row+1][column-1].equals("o"))            {                temp_row = row + 1;                temp_column = column - 1;                counter = 2;                                while (board[temp_row][temp_column].equals("o"))                {                    temp_row++;                    temp_column--;                    counter++;                }                                if (!board[temp_row][temp_column].equals("•"))                {                    counter = 0;                }                while (counter > 0)                {                    counter--;                    board[temp_row][temp_column] = "•";                    temp_row--;                    temp_column++;                }            }                        if (board[row-1][column+1].equals("o"))            {                temp_row = row - 1;                temp_column = column + 1;                counter = 2;                                while (board[temp_row][temp_column].equals("o"))                {                    temp_row--;                    temp_column++;                    counter++;                }                                if (!board[temp_row][temp_column].equals("•"))                {                    counter = 0;                }                while (counter > 0)                {                    counter--;                    board[temp_row][temp_column] = "•";                    temp_row++;                    temp_column--;                }            }        }    }*/        /**     * Method - resets the validity of all squares     *     */    private void resetBoardValidity()    {        for(int i = 0; i < 10; i++)        {            for(int j = 0; j < 10; j++)            {                valid[i][j] = false;            }        }    }        /**     * Method - checks if all the squares have been filled, if yes, ends the game     *     * @return: boolean play     */    /*public boolean gameOver()    {        int counter_black = 0;        int counter_white = 0;                for (int row = 1; row < 9; row++)        {            for (int column = 1; column < 9; column++)            {                if (board[row][column].equals("•"))                {                    counter_black += 1;                }                                if (board[row][column].equals("o"))                {                    counter_white += 1;                }            }        }                if (counter_black + counter_white == 64)        {            play = false;        }                return play;    }*/        /**     * Method - displayes the final board after the game is finished and states the final score     *     */    /*public void gameOverScreen()    {        int black_pieces = 0;        int white_pieces = 0;                System.out.print('\f');                System.out.print("                      ");                for(int j = 0; j < 10; j++)        {            System.out.print(j + "  ");        }                System.out.print("\n                   0 ");                for(int j = 0; j < 10; j++)        {            System.out.print(board[0][j]);        }                System.out.print("\n");                        for (int i = 1; i < 9; i++)        {            System.out.print("                   " + i + " " + board[i][0]);                        for (int j = 1; j < 9; j++)            {                   System.out.print("[" + board[i][j] + "]");            }                        System.out.print(board[i][9]);                        System.out.print("\n");                    }                System.out.print("                   9 ");                for(int j = 0; j < 10; j++)        {            System.out.print(board[9][j]);        }                System.out.print("\n");                System.out.print("\n                   Game over.\n                   Final ");                       for (int i = 1; i < 9; i++)        {            for (int j = 1; j < 9; j++)            {                if (board[i][j].equals("•"))                {                    black_pieces++;                }            }        }                for (int i = 1; i < 9; i++)        {            for (int j = 1; j < 9; j++)            {                if (board[i][j].equals("o"))                {                    white_pieces++;                }            }        }                System.out.print("score: ");        System.out.println("black --> " + black_pieces);        System.out.println("                                white --> " + white_pieces + "\n\n");    }*/}